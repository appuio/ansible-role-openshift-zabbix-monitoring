#     ___ ___ _  _ ___ ___    _ _____ ___ ___         
#    / __| __| \| | __| _ \  /_\_   _| __|   \        
#   | (_ | _|| .` | _||   / / _ \| | | _|| |) |       
#    \___|___|_|\_|___|_|_\/_/_\_\_|_|___|___/_ _____ 
#   |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _|
#   | |) | (_) | | .` | (_) || |   | _|| |) | |  | |  
#   |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|  
# 

---
- hosts: localhost
  gather_facts: no
  vars:
    hostpkg_bindmnt_dirs:
    - /etc/rhsm/ca
    - /etc/pki/entitlement
    - /etc/pki/rpm-gpg
    - /etc/rpm
    - /var/lib/rpm
    - /var/lib/yum
    - /var/cache/yum

    rkhunter_cron:
    - name: check_rkhunter
      minute: "30"
      hour: 21
      job: "/usr/bin/cron-send-rkhunter-checks"

    - name: rkhunter_scan
      minute: "0"
      hour: "21"
      job: "chroot /var/local/rkhunter_chroot /tmp/rkhunter/bin/rkhunter --sk --check --configfile /tmp/rkhunter/etc/rkhunter.conf --dbdir /tmp/rkhunter/db --tmpdir /tmp/rkhunter >/dev/null 2>&1"

  pre_tasks:
  - stat:
      path: /secrets/host_monitoring_vars.yml
    register: g_host_monitoring_vars

  - name: Grab all content of the yaml files as vars
    include_vars: "{{ item }}"
    with_fileglob:
    - /container_setup/*.yml

  - name: Load variables that will override the defaults
    include_vars: /secrets/host_monitoring_vars.yml
    when: g_host_monitoring_vars.stat.exists

  - fail: msg="This playbook requires {{ item }} to be set and not empty."
    when: "{{ item }} is not defined or not {{ item }}"
    with_items:
    - metric_sender_config
    - oso_host_type
    - oso_cluster_id

  - name: write out the vars coming in container_metrics.yml to a file
    copy:
      content: "{{ container_metrics_config | to_nice_yaml }}"
      dest: /etc/openshift_tools/container_metrics.yml
      mode: 0644
    when: container_metrics_config is defined

  - name: write out the vars coming in etcd_metrics.yml to a file
    copy:
      content: "{{ etcd_metrics_config | to_nice_yaml }}"
      dest: /etc/openshift_tools/etcd_metrics.yml
      mode: 0644
    when: etcd_metrics_config is defined

  - block:
    - name: find kubeconfig exact file name
      find:
        paths: "/etc/origin/node"
        patterns: "system*kubeconfig"
        use_regex: False
      register: files

    # FIXME: change to use openshift ansible module when it is packaged and installed in host-mon container
    - name: get service IP for the service
      command: >
        /usr/bin/oc --config={{ files.files.0['path'] }}
        get svc zagg-service
        --template='{% raw %}{{.spec.clusterIP}}{% endraw %}'
      register: svcipout

    - name: change zaggtarget to IP if uses local cluster zagg
      set_fact:
        metric_sender_config="{{metric_sender_config|combine({'zagg':{'url':'http://'+svcipout.stdout}},recursive=True)}}"

    when:
    - ("zagg-service.default.svc.cluster.local" in metric_sender_config['zagg']['url'])
    - metric_sender_config['zagg']['active'] == True

  - name: Generate the metric_sender.yaml config file
    copy:
      content: "{{ metric_sender_config | to_nice_yaml }}"
      dest: /etc/openshift_tools/metric_sender.yaml
      mode: "644"

  - name: Check whether /etc/origin exists
    stat:
      path: /etc/origin
    register: etc_origin

  - name: Create /etc/origin -> /etc/openshift link if needed
    file:
      state: link
      src: /etc/openshift
      dest: /etc/origin
      force: yes
    when: etc_origin.stat.exists == False and oso_host_type == 'master'

  - name: Setup Cron
    cron:
      name: "{{ item.name }}"
      job: "{{ item.job }}"
      minute: "{{ item.minute | default('*', True) }}"
      hour: "{{ item.hour | default('*', True) }}"
      day: "{{ item.day | default('*', True) }}"
      month: "{{ item.month | default('*', True) }}"
      weekday: "{{ item.weekday | default('*', True) }}"
    with_items:
    - "{{ host_monitoring_cron }}"
    - "{{ rkhunter_cron }}"

  - name: stat the kubeconfig
    stat:
      path: /etc/origin/master/admin.kubeconfig
    register: kubepath

  - name: copy kubeconfig to tmp
    copy:
      src: /etc/origin/master/admin.kubeconfig
      dest: /tmp/admin.kubeconfig
      mode: '0770'
    when: kubepath.stat.exists

  - name: add snapshotter aws creds to /root/.aws/credentials
    ini_file:
      dest: /root/.aws/credentials
      section: snapshotter
      option: "{{ item.key }}"
      value: "{{ item.value }}"
    when: oso_snapshot_aws_key_id is defined and
          oso_snapshot_aws_secret_access_key is defined
    with_items:
    - key: aws_access_key_id
      value: "{{ oso_snapshot_aws_key_id }}"
    - key: aws_secret_access_key
      value: "{{ oso_snapshot_aws_secret_access_key }}"
    ignore_errors: yes

  - name: add ops_monitoring aws creds to /root/.aws/credentials
    ini_file:
      dest: /root/.aws/credentials
      section: ops_monitoring
      option: "{{ item.key }}"
      value: "{{ item.value }}"
    when: oso_ops_monitoring_aws_key_id is defined and
          oso_ops_monitoring_aws_secret_access_key is defined
    with_items:
    - key: aws_access_key_id
      value: "{{ oso_ops_monitoring_aws_key_id }}"
    - key: aws_secret_access_key
      value: "{{ oso_ops_monitoring_aws_secret_access_key }}"
    ignore_errors: yes

  - name: create /root/.gce dir
    file:
      state: directory
      dest: /root/.gce
    when: gcp_volume_user_creds is defined

  - name: add gcp snapshotter creds to /root/.gce/creds.json
    copy:
      content: "{{ gcp_volume_user_creds }}"
      dest: /root/.gce/creds.json
    when: gcp_volume_user_creds is defined

  - name: "Create bind mountpoints for hostpkg checks"
    file:
      path: "/var/local/hostpkg{{ item }}"
      state: directory
      recurse: yes
    with_items: "{{hostpkg_bindmnt_dirs}}"

  - name: "Bind mount /host/ dirs to /var/local/hostpkg/ for hostpkg checks"
    mount:
      opts: bind
      fstype: none
      state: mounted
      name: "/var/local/hostpkg{{ item }}"
      src: "/host{{ item }}"
    with_items: "{{hostpkg_bindmnt_dirs}}"

  - name: "Create bind mountpoints for rkhunter scans"
    file:
      path: "{{ item }}"
      state: directory
      recurse: yes
    with_items:
    - /var/local/rkhunter_chroot
    - /var/local/rkhunter_tmp
    - /var/local/rkhunter_tmp/rkhunter
    - /var/local/rkhunter_tmp/rkhunter/bin
    - /var/local/rkhunter_tmp/rkhunter/db
    - /var/local/rkhunter_tmp/rkhunter/etc
    - /var/local/rkhunter_tmp/rkhunter/scripts

  - name: "Bind rkhunter scan directories"
    mount:
      opts: "{{ item.mnt_opts }}"
      fstype: auto
      state: mounted
      name: "{{ item.mnt_name }}"
      src: "{{ item.mnt_src }}"
    with_items:
    - mnt_src: "/usr/bin"
      mnt_name: "/var/local/rkhunter_tmp/rkhunter/bin"
      mnt_opts: "bind,ro"
    - mnt_src:  "/var/lib/rkhunter/db"
      mnt_name: "/var/local/rkhunter_tmp/rkhunter/db"
      mnt_opts: "bind"
    - mnt_src: "/usr/share/rkhunter/scripts/"
      mnt_name: "/var/local/rkhunter_tmp/rkhunter/scripts/"
      mnt_opts: "bind,ro"

  # Running as commands because mount module doesn't seem to recognize rbind
  - name: "Bind more rkhunter scan directories"
    command: "{{ item }}"
    with_items:
    - "mount --rbind -o ro /host /var/local/rkhunter_chroot"
    - "mount --rbind /var/local/rkhunter_tmp /var/local/rkhunter_chroot/tmp"

  - name: "Set initial values for rkhunter to use"
    command: "chroot /var/local/rkhunter_chroot /tmp/rkhunter/bin/rkhunter --configfile /tmp/rkhunter/etc/rkhunter.conf --dbdir /tmp/rkhunter/db --tmpdir /tmp/rkhunter --propupd --pkgmgr RPM --nomow -q"

  - name: "Run a no-log scan to get copies of passwd and group"
    command: "chroot /var/local/rkhunter_chroot /tmp/rkhunter/bin/rkhunter -q --sk --check --configfile /tmp/rkhunter/etc/rkhunter.conf --dbdir /tmp/rkhunter/db --tmpdir /tmp/rkhunter --nolog"
    ignore_errors: yes

  - name: "create rkhunter variables file"
    copy:
      dest: "/etc/openshift_tools/rkhunter_config.yaml"
      content: |-
        ---
        logfile: /var/local/rkhunter_tmp/rkhunter/rkhunter.log

  - name: "Set additional rkhunter ignore rules"
    blockinfile:
      dest: "/var/local/rkhunter_tmp/rkhunter/etc/rkhunter.conf"
      insertafter: "ALLOWHIDDENDIR"
      marker: "# {mark} Ansible-managed rkhunter ignore rules"
      block: |-
        ALLOWHIDDENDIR=/dev/shm/.ansible
        ALLOWDEVDIR=/dev/shm/.ansible/*
        ALLOWDEVDIR=/dev/shm/.ansible/tmp/*
        ALLOWDEVDIR=/dev/shm/.ansible/tmp/account/*
        ALLOWDEVFILE=/dev/shm/.ansible/tmp/*
        ALLOWDEVFILE=/dev/shm/.ansible/tmp/account/*
