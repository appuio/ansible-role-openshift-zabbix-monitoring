#!/usr/bin/ansible-playbook
---
- hosts: "oo_clusterid_opstest:&oo_version_3:&oo_master_primary"
  gather_facts: no
  user: root

  vars:
  - def_namespace: default
  - def_kind: node
  - def_name: ip-172-31-4-81.ec2.internal
  - def_original_labels:
    - key: beta.kubernetes.io/instance-type
      value: m4.large
    - key: color
      value: red
    - key: failure-domain.beta.kubernetes.io/region
      value: us-east-1
    - key: failure-domain.beta.kubernetes.io/zone
      value: us-east-1c
    - key: kubernetes.io/hostname
      value: ip-172-31-4-81.ec2.internal
    - key: region
      value: us-east-1
    - key: type
      value: infra

  post_tasks:
  - name: delete test labels (so future tests work)
    oc_label:
      state: absent
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
      - key: jdiaz3

  - name: list to check whether our test labels already exist
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that jdiaz2 and jdiaz3 test labels don't exist
    assert:
      that: label_out['results'][0]['jdiaz2'] is not defined and
            label_out['results'][0]['jdiaz3'] is not defined

  - name: check current list of labels
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that the original labels that should be there are actually there
    assert:
      that: label_out['results'][0][item['key']] is defined and
            label_out['results'][0][item['key']] == item['value']
    with_items: "{{ def_original_labels }}"

  - name: add label
    oc_label:
      state: add
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
        value: "yes"
    register: label_out
  #- debug: var=label_out
  - name: assert adding label marked as changed
    assert:
      that: label_out['changed'] == True

  - name: test if add label succeeded
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that jdiaz2 label actually added
    assert:
      that: label_out['results'][0]['jdiaz2'] is defined and
            label_out['results'][0]['jdiaz2'] == "yes"

  - name: test that re-adding does nothing
    oc_label:
      state: add
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
        value: "yes"
    register: label_out
  #- debug: var=label_out
  - name: assert that re-adding made no changes
    assert:
      that: label_out['changed'] == False

  - name: test that modifying existing label marked modified
    oc_label:
      state: add
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
        value: "different"
    register: label_out
  #- debug: var=label_out
  - name: assert that modifying existing label marked modified
    assert:
      that: label_out['changed'] == True

  - name: test if modify label actually did modification
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that jdiaz2 label actually modified
    assert:
      that: label_out['results'][0]['jdiaz2'] is defined and
            label_out['results'][0]['jdiaz2'] == "different"

  - name: delete non-existant label
    oc_label:
      state: absent
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaznone
    register: label_out
  #- debug: var=label_out
  - name: assert that deleting previous label marked changed
    assert:
      that: label_out['changed'] == False
 
  - name: delete label
    oc_label:
      state: absent
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
    register: label_out
  #- debug: var=label_out
  - name: assert that deleting previous label marked changed
    assert:
      that: label_out['changed'] == True
     
  - name: re-delete label
    oc_label:
      state: absent
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
    register: label_out
  #- debug: var=label_out
  - name: assert that re-deleting label marked not changed
    assert:
      that: label_out['changed'] == False

  - name: check whether really deleted
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: assert label actually deleted
    assert:
      that: label_out['results'][0]['jdiaz2'] is not defined

  - name: add two labels
    oc_label:
      state: add
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
        value: "yes"
      - key: jdiaz3
        value: "yes"
    register: label_out
  #- debug: var=label_out
  - name: assert that adding a second label marked as changed
    assert:
      that: label_out['changed'] == True

  - name: check whether both labels are there
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that both labels actually exist
    assert:
      that: label_out['results'][0]['jdiaz2'] is defined and
            label_out['results'][0]['jdiaz2'] == 'yes' and
            label_out['results'][0]['jdiaz3'] is defined and
            label_out['results'][0]['jdiaz3'] == 'yes'

  - name: check whether two deletes work
    oc_label:
      state: absent
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
      - key: jdiaz3
    register: label_out
  #- debug: var=label_out
  - name: assert that change were made when delete both labels
    assert:
      that: label_out['changed'] == True

  - name: check whether re-two deletes makes no changes
    oc_label:
      state: absent
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels:
      - key: jdiaz2
      - key: jdiaz3
    register: label_out
  #- debug: var=label_out
  - name: assert that change was not made when re-delete both labels
    assert:
      that: label_out['changed'] == False

  - name: check that present with current list makes no changes
    oc_label:
      state: present
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels: "{{ def_original_labels }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that no changes are made when current list matches existing list
    assert:
      that: label_out['changed'] == False

  - name: check that present with extra item makes changes
    oc_label:
      state: present
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels: "{{ def_original_labels + [{'key': 'jdiaz2', 'value': 'yes'}] }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that changes were made
    assert:
      that: label_out['changed'] == True

  - name: get current label list
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: asssert that new label was actually added
    assert:
      that: label_out['results'][0]['jdiaz2'] is defined and
            label_out['results'][0]['jdiaz2'] == 'yes'

  - name: check that present with changed item makes changes
    oc_label:
      state: present
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels: "{{ def_original_labels + [{'key': 'jdiaz2', 'value': 'different'}]}}"
    register: label_out
  #- debug: var=label_out
  - name: assert that changes were made when existing key's value is changed
    assert:
      that: label_out['changed'] == True

  - name: get current label list
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: asssert that changed label was actually changed
    assert:
      that: label_out['results'][0]['jdiaz2'] == 'different'

  - name: check that present with removed extra item makes changes
    oc_label:
      state: present
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
      labels: "{{ def_original_labels }}"
    register: label_out
  #- debug: var=label_out
  - name: assert that changes were made
    assert:
      that: label_out['changed'] == True

  - name: get current label list
    oc_label:
      state: list
      namespace: "{{ def_namespace }}"
      kind: "{{ def_kind }}"
      name: "{{ def_name }}"
    register: label_out
  #- debug: var=label_out
  - name: asssert that present-removed actually removed
    assert:
      that: label_out['results'][0]['jdiaz2'] is not defined


