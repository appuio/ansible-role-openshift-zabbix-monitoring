# This playbook installs the latest OS updates on a cluster and reboots all updated cluster hosts.
# It's idempotent and safe to run repeatedly. Only hosts that have been updated will be rebooted.
# To use this script, choose either a kernel version or a package name + version.
# The name and version of the package chosen is used to determine if the OS upgrades are complete. An entire system update will be performed if the specified version is not already installed.
# If the package+version is already installed, no updates will be performed.
#
# Usage examples:
#
# To update to kernel version 3.10.0-693.1.1.el7, use either of the following commands
#  ansible-playbook os_update.yml -e cli_package_version=3.10.0-693.1.1.el7 -e cli_clusterid=dakinitest
#  ansible-playbook os_update.yml -e cli_package_name=kernel -e cli_package_version=3.10.0-693.1.1.el7 -e cli_clusterid=dakinitest
#
# To update to an arbitrary package name/verison, for example libgcc 4.8.5-16.el7, use this:
#  ansible-playbook os_update.yml -e cli_package_name=libgcc -e cli_package_version=4.8.5-16.el7 -e cli_clusterid=dakinitest

- hosts: localhost
  gather_facts: no
  become: no
  user: root

  tasks:

  - name: Check for required variables
    fail:
      msg: "Please define {{ item }}"
    when: "{{ item }} is undefined"
    with_items:
    - cli_clusterid
    - cli_package_version
    run_once: True

##############################################
# Master upgrade
##############################################

- hosts: "oo_clusterid_{{ cli_clusterid }}:&oo_hosttype_master"
  gather_facts: no
  become: no
  user: root
  serial: 1

  roles:
  - role: ../../../roles/package_update_needed
    pun_package_name: "{{ cli_package_name| default('kernel') }}"
    pun_wanted_version: "{{ cli_package_version }}"

  - role: ../../../roles/openshift_aws_elb_instance_manager
    osaeim_elb_name: "{{ cli_clusterid }}-master"
    osaeim_state: absent
    osaeim_instance_ids: "{{ ec2_id }}"
    osaeim_region: "{{ oo_sublocation }}"
    osaeim_aws_access_key: "{{ lookup('env', 'ACCESS_KEY_ID') }}"
    osaeim_aws_secret_key: "{{ lookup('env', 'SECRET_ACCESS_KEY') }}"
    when: pun_retval_update_needed

  - role: ../../../roles/os_update_latest
    oul_package_names: "*"
    oul_exclude: "docker*, atomic-openshift*"
    oul_os_update: True
    when: pun_retval_update_needed

  - role: ../../../roles/os_reboot_server
    when: pun_retval_update_needed

  - role: ../../../roles/openshift_aws_elb_instance_manager
    osaeim_elb_name: "{{ cli_clusterid }}-master"
    osaeim_state: present
    osaeim_instance_ids: "{{ ec2_id }}"
    osaeim_region: "{{ oo_sublocation }}"
    osaeim_aws_access_key: "{{ lookup('env', 'ACCESS_KEY_ID') }}"
    osaeim_aws_secret_key: "{{ lookup('env', 'SECRET_ACCESS_KEY') }}"
    when: pun_retval_update_needed
    run_once: True

##############################################
# Infra upgrade
##############################################

- hosts: "oo_clusterid_{{ cli_clusterid }}:&oo_subhosttype_infra"
  gather_facts: no
  become: no
  user: root
  serial: 1

  roles:
  - role: ../../../roles/package_update_needed
    pun_package_name: "{{ cli_package_name| default('kernel') }}"
    pun_wanted_version: "{{ cli_package_version }}"

  - role: ../../../roles/openshift_node_schedulable
    osns_is_schedulable: False
    osns_drain: True
    osns_cluster_master: "{{ groups['oo_hosttype_master'] | intersect(groups['oo_clusterid_' ~ oo_clusterid]) | first }}"
    when: pun_retval_update_needed
    
  - role: ../../../roles/os_update_latest
    oul_package_names: "*"
    oul_exclude: "docker*, atomic-openshift*"
    oul_os_update: True
    when: pun_retval_update_needed

  - role: ../../../roles/os_reboot_server
    when: pun_retval_update_needed

  - role: ../../../roles/openshift_node_schedulable
    osns_is_schedulable: True
    osns_cluster_master: "{{ groups['oo_hosttype_master'] | intersect(groups['oo_clusterid_' ~ oo_clusterid]) | first }}"
    when: pun_retval_update_needed
    
##############################################
# Compute upgrade
##############################################

- hosts: "oo_clusterid_{{ cli_clusterid }}:&oo_subhosttype_compute"
  gather_facts: no
  become: no
  user: root
  serial: 10%

  roles:
  - role: ../../../roles/package_update_needed
    pun_package_name: "{{ cli_package_name| default('kernel') }}"
    pun_wanted_version: "{{ cli_package_version }}"

  - role: ../../../roles/openshift_node_schedulable
    osns_is_schedulable: False
    osns_drain: True
    osns_cluster_master: "{{ groups['oo_hosttype_master'] | intersect(groups['oo_clusterid_' ~ oo_clusterid]) | first }}"
    when: pun_retval_update_needed

  - role: ../../../roles/os_update_latest
    oul_package_names: "*"
    oul_exclude: "docker*, atomic-openshift*"
    oul_os_update: True
    when: pun_retval_update_needed
 
  - role: ../../../roles/os_reboot_server
    when: pun_retval_update_needed

  - role: ../../../roles/openshift_node_schedulable
    osns_is_schedulable: True
    osns_cluster_master: "{{ groups['oo_hosttype_master'] | intersect(groups['oo_clusterid_' ~ oo_clusterid]) | first }}"
    when: pun_retval_update_needed
